import Externals.DOM;
import Altitude.Frontend;
import Altitude.Frontend.RouteEngines; // Don't forget to import this module
                                       // for routing

external $;

module TabsExample
{
    // Make sure you inherit from 'RoutedController' instead of a regular
    // Altitude 'Controller'
    class Tab2Controller : RoutedController
    {
        Tab2View view = new Tab2View();
        Tab2Model model = new Tab2Model();

        // Register the route.
        // We use the base 'IRouter' interface for flexibility during testing.
        // For non-test web browser applications, instantiate a
        // 'WebBrowserRouter' (available via Altitude) and pass in the instance
        // to this 'registerRoute' method. An example is in the main file.
        public override void registerRoute(IRouter router) {
            router.registerRoute("tab2", this.view.show, this.view.hide);
        }

        // Attach views to models.
        // This allows us to easily separate models and views.
        // In your test code, don't attach views to your models for easier
        // testing.
        public override void attachViews() {
            this.model.attach(this.view);
            this.view.initialize(this.model); // Perform initial render
        }
        // Listen to user input events - the classic controller responsibility.
        // For easier testing, don't listen for events in your test code.
        public override void listenEvents() {
            // We have to attach events to 'document' using jQuery because, with
            // routing, the elements may not be immediately rendered when
            // 'listenEvents' is first called. Thus, we must constantly listen
            // for the event. In older versions of jQuery (before 1.9), this was
            // the 'live' method.
            $(document).on("click", "#tab2button", this.view.msgbox);
        }
    }
}